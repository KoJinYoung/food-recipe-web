//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.RECIPETYPE = {
  'NONE' : 0,
  'RECOMM' : 1,
  'SUBSC' : 2
};
ttypes.LEVEL = {
  'EASY' : 1,
  'NORMAL' : 2,
  'HARD' : 3
};
ttypes.RecipeExCode = {
  'INVALID' : 0,
  'SERVER_ERROR' : 1,
  'NOT_FOUND' : 2,
  'DATA_EXIST' : 3
};
IngredientInfo = module.exports.IngredientInfo = function(args) {
  this.name = null;
  this.id = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
IngredientInfo.prototype = {};
IngredientInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IngredientInfo.prototype.write = function(output) {
  output.writeStructBegin('IngredientInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecipeInfo = module.exports.RecipeInfo = function(args) {
  this.calories = null;
  this.level = null;
  this.cookTime = null;
  this.ingredient = null;
  if (args) {
    if (args.calories !== undefined) {
      this.calories = args.calories;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.cookTime !== undefined) {
      this.cookTime = args.cookTime;
    }
    if (args.ingredient !== undefined) {
      this.ingredient = args.ingredient;
    }
  }
};
RecipeInfo.prototype = {};
RecipeInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.calories = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.cookTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.ingredient = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.IngredientInfo();
          elem6.read(input);
          this.ingredient.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecipeInfo.prototype.write = function(output) {
  output.writeStructBegin('RecipeInfo');
  if (this.calories !== null && this.calories !== undefined) {
    output.writeFieldBegin('calories', Thrift.Type.I32, 1);
    output.writeI32(this.calories);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 2);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.cookTime !== null && this.cookTime !== undefined) {
    output.writeFieldBegin('cookTime', Thrift.Type.I32, 3);
    output.writeI32(this.cookTime);
    output.writeFieldEnd();
  }
  if (this.ingredient !== null && this.ingredient !== undefined) {
    output.writeFieldBegin('ingredient', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.ingredient.length);
    for (var iter7 in this.ingredient)
    {
      if (this.ingredient.hasOwnProperty(iter7))
      {
        iter7 = this.ingredient[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Recipe = module.exports.Recipe = function(args) {
  this.recipeId = null;
  this.writerId = null;
  this.writerPic = null;
  this.writerName = null;
  this.recipeName = null;
  this.recipePic = null;
  this.recipeComment = null;
  this.recipeInfo = null;
  this.recipeLiked = null;
  this.recipeType = null;
  if (args) {
    if (args.recipeId !== undefined) {
      this.recipeId = args.recipeId;
    }
    if (args.writerId !== undefined) {
      this.writerId = args.writerId;
    }
    if (args.writerPic !== undefined) {
      this.writerPic = args.writerPic;
    }
    if (args.writerName !== undefined) {
      this.writerName = args.writerName;
    }
    if (args.recipeName !== undefined) {
      this.recipeName = args.recipeName;
    }
    if (args.recipePic !== undefined) {
      this.recipePic = args.recipePic;
    }
    if (args.recipeComment !== undefined) {
      this.recipeComment = args.recipeComment;
    }
    if (args.recipeInfo !== undefined) {
      this.recipeInfo = args.recipeInfo;
    }
    if (args.recipeLiked !== undefined) {
      this.recipeLiked = args.recipeLiked;
    }
    if (args.recipeType !== undefined) {
      this.recipeType = args.recipeType;
    }
  }
};
Recipe.prototype = {};
Recipe.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.recipeId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.writerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.writerPic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.writerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.recipeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.recipePic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.recipeComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.recipeInfo = new ttypes.RecipeInfo();
        this.recipeInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.recipeLiked = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.recipeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Recipe.prototype.write = function(output) {
  output.writeStructBegin('Recipe');
  if (this.recipeId !== null && this.recipeId !== undefined) {
    output.writeFieldBegin('recipeId', Thrift.Type.I32, 1);
    output.writeI32(this.recipeId);
    output.writeFieldEnd();
  }
  if (this.writerId !== null && this.writerId !== undefined) {
    output.writeFieldBegin('writerId', Thrift.Type.I32, 2);
    output.writeI32(this.writerId);
    output.writeFieldEnd();
  }
  if (this.writerPic !== null && this.writerPic !== undefined) {
    output.writeFieldBegin('writerPic', Thrift.Type.STRING, 3);
    output.writeString(this.writerPic);
    output.writeFieldEnd();
  }
  if (this.writerName !== null && this.writerName !== undefined) {
    output.writeFieldBegin('writerName', Thrift.Type.STRING, 4);
    output.writeString(this.writerName);
    output.writeFieldEnd();
  }
  if (this.recipeName !== null && this.recipeName !== undefined) {
    output.writeFieldBegin('recipeName', Thrift.Type.STRING, 5);
    output.writeString(this.recipeName);
    output.writeFieldEnd();
  }
  if (this.recipePic !== null && this.recipePic !== undefined) {
    output.writeFieldBegin('recipePic', Thrift.Type.STRING, 6);
    output.writeString(this.recipePic);
    output.writeFieldEnd();
  }
  if (this.recipeComment !== null && this.recipeComment !== undefined) {
    output.writeFieldBegin('recipeComment', Thrift.Type.STRING, 7);
    output.writeString(this.recipeComment);
    output.writeFieldEnd();
  }
  if (this.recipeInfo !== null && this.recipeInfo !== undefined) {
    output.writeFieldBegin('recipeInfo', Thrift.Type.STRUCT, 8);
    this.recipeInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.recipeLiked !== null && this.recipeLiked !== undefined) {
    output.writeFieldBegin('recipeLiked', Thrift.Type.BOOL, 9);
    output.writeBool(this.recipeLiked);
    output.writeFieldEnd();
  }
  if (this.recipeType !== null && this.recipeType !== undefined) {
    output.writeFieldBegin('recipeType', Thrift.Type.I32, 10);
    output.writeI32(this.recipeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecipeException = module.exports.RecipeException = function(args) {
  Thrift.TException.call(this, "RecipeException")
  this.name = "RecipeException"
  this.what = null;
  this.why = null;
  if (args) {
    if (args.what !== undefined) {
      this.what = args.what;
    }
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(RecipeException, Thrift.TException);
RecipeException.prototype.name = 'RecipeException';
RecipeException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.what = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecipeException.prototype.write = function(output) {
  output.writeStructBegin('RecipeException');
  if (this.what !== null && this.what !== undefined) {
    output.writeFieldBegin('what', Thrift.Type.I32, 1);
    output.writeI32(this.what);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

