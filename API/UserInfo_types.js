//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.SIGNUP = {
  'SIGNUP' : 0,
  'CERTIFICATED' : 1
};
ttypes.AUTH_METHOD = {
  'FACEBOOK' : 1,
  'KAKAO' : 16,
  'EMAIL' : 256
};
ttypes.UserExCode = {
  'INVALID' : 0,
  'SERVER_ERROR' : 1,
  'NOT_FOUND' : 2,
  'DATA_EXIST' : 3
};
User = module.exports.User = function(args) {
  this.uid = null;
  this.token = null;
  this.username = null;
  this.auth_method = null;
  this.facebookId = null;
  this.kakaoId = null;
  this.email = null;
  this.pic = null;
  this.follower = null;
  this.following = null;
  if (args) {
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.auth_method !== undefined) {
      this.auth_method = args.auth_method;
    }
    if (args.facebookId !== undefined) {
      this.facebookId = args.facebookId;
    }
    if (args.kakaoId !== undefined) {
      this.kakaoId = args.kakaoId;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.pic !== undefined) {
      this.pic = args.pic;
    }
    if (args.follower !== undefined) {
      this.follower = args.follower;
    }
    if (args.following !== undefined) {
      this.following = args.following;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.auth_method = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.facebookId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.kakaoId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.pic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.follower = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.following = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.auth_method !== null && this.auth_method !== undefined) {
    output.writeFieldBegin('auth_method', Thrift.Type.I32, 4);
    output.writeI32(this.auth_method);
    output.writeFieldEnd();
  }
  if (this.facebookId !== null && this.facebookId !== undefined) {
    output.writeFieldBegin('facebookId', Thrift.Type.STRING, 5);
    output.writeString(this.facebookId);
    output.writeFieldEnd();
  }
  if (this.kakaoId !== null && this.kakaoId !== undefined) {
    output.writeFieldBegin('kakaoId', Thrift.Type.STRING, 6);
    output.writeString(this.kakaoId);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 7);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.pic !== null && this.pic !== undefined) {
    output.writeFieldBegin('pic', Thrift.Type.STRING, 8);
    output.writeString(this.pic);
    output.writeFieldEnd();
  }
  if (this.follower !== null && this.follower !== undefined) {
    output.writeFieldBegin('follower', Thrift.Type.I32, 9);
    output.writeI32(this.follower);
    output.writeFieldEnd();
  }
  if (this.following !== null && this.following !== undefined) {
    output.writeFieldBegin('following', Thrift.Type.I32, 10);
    output.writeI32(this.following);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserException = module.exports.UserException = function(args) {
  Thrift.TException.call(this, "UserException")
  this.name = "UserException"
  this.what = null;
  this.why = null;
  if (args) {
    if (args.what !== undefined) {
      this.what = args.what;
    }
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(UserException, Thrift.TException);
UserException.prototype.name = 'UserException';
UserException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.what = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserException.prototype.write = function(output) {
  output.writeStructBegin('UserException');
  if (this.what !== null && this.what !== undefined) {
    output.writeFieldBegin('what', Thrift.Type.I32, 1);
    output.writeI32(this.what);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

